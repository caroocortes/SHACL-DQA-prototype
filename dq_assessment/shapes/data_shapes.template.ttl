{% macro interlinking_external_uris(dataset_uri, interlinking_property) -%}
ex:UsageExternalURIEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{ interlinking_property }}> ;
    sh:property [
        sh:path <{{ interlinking_property }}> ;
        sh:pattern "^(?!{{ dataset_uri }})" ;
        sh:message "UsageExternalURIEntities - The dataset doesn't contain links to external sources"
    ].
{%- endmacro %}

{% macro performance_hash_uris_entities(type_property) -%}
ex:UsageHashURIsEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{ type_property }}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:pattern "^[^#]*$" ;
            sh:message "UsageHashURIsEntities - It's is recommended the usage of slash URIs";
        ]
    ).
{%- endmacro %}

{% macro understandability_label_entities(type_property, labeling_property) -%}
ex:LabelForEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{ type_property }}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:path <{{ labeling_property }}> ;
            sh:minCount 1 ;
            sh:message "LabelForEntities - All entities should be tagged with a label.";
        ]
    ).
{%- endmacro %}

{% macro understandability_uri_regex_compliance_entities(type_property, uri_regex_pattern) -%}
ex:URIRegexComplianceEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{ type_property }}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:pattern "{{ uri_regex_pattern }}" ; 
            sh:message "URIRegexComplianceEntities - URIs should match the regex pattern provided in void:uriRegexPattern" ;
        ]
    ).
{%- endmacro %}

{% macro understandability_uri_space_compliance_entities(type_property, uri_space) -%}
ex:URISpaceComplianceEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{ type_property }}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:pattern "^{{ uri_space }}" ; 
            sh:message "URISpaceComplianceEntities - URIs should match the URI space provided in void:uriSpace" ;
        ]
    ).
{%- endmacro %}

{% macro interlinking_completeness(type_property, interlinking_property) -%}
ex:InterlinkingCompletenessShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{type_property}}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:path <{{interlinking_property}}> ;
            sh:minCount 1;
            sh:message "InterlinkingCompleteness - Entities should be interlinked." ;
        ]
    ).
{%- endmacro %}

{% macro completeness_schema_completeness_class_usage(shape_index, class_uri, type_property) -%}
ex:NotNamedIndividualShape
    a sh:NodeShape;
    sh:property [
            sh:path <{{type_property}}> ;
            sh:not [ sh:hasValue owl:NamedIndividual ] ;
    ].

ex:SchemaCompletenessClassUsageShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetNode <{{class_uri}}> ;
    sh:property [
        sh:path [ sh:inversePath <{{type_property}}> ] ;   
        sh:minCount 1 ;   
        sh:qualifiedValueShape [
            sh:node ex:NotNamedIndividualShape ;
        ];                     
        sh:qualifiedMinCount 1 ;
        sh:message "SchemaCompletenessClassUsage_{{shape_index}} - The target class is defined in the vocabulary but isn't used in the dataset";
    ].
{%- endmacro %}

{% macro representational_conciseness_uris_length(type_property, max_length_value) -%}
ex:URIsLengthEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{ type_property }}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:maxLength {{ max_length_value }} ;
            sh:message "URIsLengthEntities - URIs should have a length of less than {{ max_length_value }}";
        ]
    ).
{%- endmacro %}

{% macro representational_conciseness_uris_parameters(type_property) -%}
ex:URIsParametersEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{ type_property }}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:not[ sh:pattern "\\?.+=.*" ; ] ;
            sh:message "URIsParametersEntities - URIs shouldn't use parameters";
        ]
    ).
{%- endmacro %}

{% macro representational_conciseness_prolix_features(type_property) -%}
ex:ProlixFeaturesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{ type_property }}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:not[
                sh:or(
                    [ sh:class rdf:Statement; ]
                    [ sh:class rdf:List; ]
                    [ sh:class rdf:Seq; ]
                    [ sh:class rdf:Bag; ]
                    [ sh:class rdf:Alt; ]
                );
                sh:message "ProlixFeatures - Prolix features shouldn't be used (Lists, Containers)";
            ]
        ]
    ).
{%- endmacro %}

{% macro versatility_languages_labels_entities(type_property, labeling_property) -%}
ex:DifferentLanguagesLabelsEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{labeling_property}}> ;
    sh:property [
        sh:path <{{labeling_property}}> ;
        sh:datatype rdf:langString;
        sh:message "DifferentLanguagesLabelsEntities - Entities should provide labels with language tags";
    ].
{%- endmacro %}

{% macro versatility_languages_descriptions_entities(type_property, description_property) -%}
ex:DifferentLanguagesDescriptionsEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{description_property}}> ;
    sh:property [
        sh:path <{{description_property}}> ;
        sh:datatype rdf:langString ;
        sh:message "DifferentLanguagesDescriptionsEntities - Entities should provide descriptions with language tags";
    ].
{%- endmacro %}

{% macro interpretability_self_descriptive_formats(type_property) -%}
ex:SelfDescriptiveFormatShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{type_property}}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:nodeKind sh:IRI ;
            sh:message "SelfDescriptiveFormat - Entities should be identified by URIs" ;
        ]
    ).
{%- endmacro %}

{% macro interpretability_self_descriptive_format_properties(shape_index, property_uri) -%}
ex:SelfDescriptiveFormatPropertiesShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetObjectsOf <{{property_uri}}> ;
    sh:message "SelfDescriptiveFormatProperties_{{shape_index}} - The property {{property_uri}} uses literals or blank nodes as values";
    sh:nodeKind sh:IRI .
{%- endmacro %}

{% macro interpretability_usage_blank_nodes(type_property) -%}
ex:BlankNodesUsageEntitiesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{type_property}}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:not [ sh:nodeKind sh:BlankNode] ;
            sh:message "BlankNodesUsageEntities - The dataset should not use blank nodes to identify entities" ;
        ]
    ).
{%- endmacro %}

{% macro consistency_entities_disjoint_classes(shape_id, first_class_uri, second_class_uri) -%}
ex:EntitiesDisjointClassesShape_{{shape_id}}
    a sh:NodeShape ;
    sh:targetClass <{{first_class_uri}}> ;
    sh:not [ 
        sh:class <{{second_class_uri}}>;
        sh:message "EntitiesDisjointClasses_{{shape_id}} - There are instances of the class {{first_class_uri}} that are instances of the disjoint class {{second_class_uri}}";
    ].
{%- endmacro %}

{% macro consistency_misplaced_properties(shape_index, property_uri, type_property) -%}
ex:MisplacedPropertiesShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetNode <{{property_uri}}> ;
    sh:property [
        sh:path [ sh:inversePath <{{type_property}}> ] ;
        sh:maxCount 0;
        sh:message "MisplacedProperties_{{shape_index}} - The property {{property_uri}} is being used as a class" ;
    ].
{%- endmacro %}

{% macro consistency_misplaced_classes(shape_index, class_uri, type_property) -%}
ex:MisplacedClassesShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{type_property}}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:path  <{{class_uri}}> ;
            sh:maxCount 0;
            sh:message "MisplacedClasses_{{shape_index}} - The class {{class_uri}} is being used as a property" ;
        ]
    ).
{%- endmacro %}

{% macro consistency_misuse_object_properties(shape_index, property_uri) -%}
ex:MisuseOwlObjectPropertiesShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}> ;
    sh:property [
        sh:path <{{property_uri}}>;
        sh:nodeKind sh:BlankNodeOrIRI;
        sh:message "MisuseOwlObjectProperties_{{shape_index}} - The object property {{property_uri}} is being used with Literals"
    ].
{%- endmacro %}

{% macro consistency_misuse_datatype_properties(shape_index, property_uri) -%}
ex:MisuseOwlDatatypePropertiesShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}> ;
    sh:property [
        sh:path <{{property_uri}}> ;
        sh:nodeKind sh:Literal ;
        sh:message "MisuseOwlDatatypeProperties_{{shape_index}} - The datatype property {{property_uri}} is being used with Resources" ;
    ].
{%- endmacro %}

{% macro consistency_deprecated_classes(classes_list, type_property) -%}
ex:DeprecatedClassesShape
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{type_property}}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:path <{{type_property}}> ;
            sh:not [ 
                sh:in ( {{classes_list}} );
                sh:message "DeprecatedClasses - Deprecated classes are being used in the dataset";
            ];
        ]
    ).
{%- endmacro %}

{% macro consistency_deprecated_properties(shape_index, property_uri, type_property) -%}
ex:DeprecatedPropertiesShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{type_property}}> ;
    sh:or (
        [
            sh:path rdf:type ;
            sh:hasValue rdfs:Class ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue rdf:Property ;
        ]
        [
            sh:path rdf:type ;
            sh:hasValue owl:NamedIndividual ;
        ]
        [
            sh:path <{{property_uri}}> ;
            sh:maxCount 0;
            sh:message "DeprecatedProperties_{{shape_index}} - Deprecated properties are being used in the dataset";
        ]
    ).
{%- endmacro %}

{% macro consistency_inverse_functional_property(shape_index, property_uri) -%}
ex:InverseFunctionalPropertyUniquenessShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetObjectsOf <{{property_uri}}> ;
    sh:property [
        sh:path [ sh:inversePath <{{property_uri}}> ] ;
        sh:maxCount 1 ;
        sh:message "InverseFunctionalPropertyUniqueness_{{shape_index}} - The uniqueness characteristic of the inverse functional property is not enforced" ;
    ].
{%- endmacro %}

{% macro consistency_functional_property(shape_index, property_uri) -%}
ex:FunctionalPropertyShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}> ;
    sh:property [
        sh:path <{{property_uri}}> ;
        sh:maxCount 1 ;
        sh:message "FunctionalProperty_{{shape_index}} - The property {{property_uri}} is used with more than one value for the same node" ;
    ].
{%- endmacro %}

{% macro consistency_correct_domain(shape_index, property_uri, domain_class) -%}
ex:CorrectDomainShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}> ;
    sh:message "CorrectDomain_{{shape_index}} - The property {{property_uri}} is used with an incorrect domain" ;
    sh:class <{{domain_class}}> .
{%- endmacro %}

{% macro consistency_correct_domain_node_kind(shape_index, property_uri) -%}
ex:CorrectDomainShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}> ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:message "CorrectDomain_{{shape_index}} - The property {{property_uri}} is used with an incorrect domain" .
{%- endmacro %}

{% macro consistency_correct_range_datatype(shape_index, property_uri, datatype_uri) -%}
ex:CorrectRangeShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}>;
    sh:property [
        sh:path <{{property_uri}}> ;
        sh:message "CorrectRange_{{shape_index}} - The property {{property_uri}} is used with an incorrect range" ;
        sh:datatype <{{datatype_uri}}>
    ].
{%- endmacro %}

{% macro consistency_correct_range_node_kind_literal(shape_index, property_uri) -%}
ex:CorrectRangeShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}>;
    sh:property [
        sh:path <{{property_uri}}> ;
        sh:nodeKind sh:Literal ;
        sh:message "CorrectRange_{{shape_index}} - The property {{property_uri}} is used with an incorrect range"
    ].
{%- endmacro %}

{% macro consistency_correct_range_object(shape_index, property_uri, class_uri) -%}
ex:CorrectRangeShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}>;
    sh:property [
        sh:path <{{property_uri}}> ;
        sh:message "CorrectRange_{{shape_index}} - The property {{property_uri}} is used with an incorrect range" ;
        sh:class <{{class_uri}}> 
    ].
{%- endmacro %}

{% macro consistency_correct_range_node_kind_owl_thing(shape_index, property_uri) -%}
ex:CorrectRangeShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}>;
    sh:property [
        sh:path <{{property_uri}}> ;
        sh:nodeKind sh:BlankNodeOrIRI ;
        sh:message "CorrectRange_{{shape_index}} - The property {{property_uri}} is used with an incorrect range"
    ] .
{%- endmacro %}

{% macro consistency_correct_range_node_kind_rdfs_resource(shape_index, property_uri) -%}
ex:CorrectRangeShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}>;
    sh:property [
    sh:path <{{property_uri}}> ;
        sh:or (
            [
                sh:nodeKind sh:BlankNodeOrIRI ;
                sh:message "CorrectRange_{{shape_index}} - The property {{property_uri}} is used with an incorrect range"]
            [
                sh:nodeKind sh:Literal ;
                sh:message "CorrectRange_{{shape_index}} - The property {{property_uri}} is used with an incorrect range"
            ]
        );
    ] .
{%- endmacro %}

{% macro consistency_irreflexive_property(shape_index, property_uri) -%}
ex:IrreflexivePropertyShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}> ;
    sh:message "IrreflexiveProperty_{{shape_index}} - The irreflexive constraint for the property {{property_uri}} is not enforced " ;
    sh:disjoint <{{property_uri}}> .
{%- endmacro %}

{% macro syntactic_validity_malformed_literal(shape_index, property_uri, datatype_uri) -%}
ex:MalformedLiteralShape_{{shape_index}}
    a sh:NodeShape ;
    sh:targetSubjectsOf <{{property_uri}}> ;
    sh:property [
        sh:path <{{property_uri}}> ;
        sh:datatype <{{datatype_uri}}>;
        sh:message "MalformedLiteral_{{shape_index}} - The property {{property_uri}} is used with an incompatible datatype or an il-typed literal" ;
    ].
{%- endmacro %}